

@page "/Iteminventory"
@inject iProduct productservices



<div class="container-fluid d-flex flex-column h-100 py-2">
    <LoadingIndicator @bind-Visible="@isLoading">
        <ChildContent>
             <Field class="d-flex flex-row justify-content-between px-1 my-0 pt-2">
        @* <Button class="d-block btn btn-success w-auto px-4 " Clicked="@ShowAddModal">Add</Button> *@
        <TextEdit Placeholder="Search.." class="w-50" />
    </Field>

    <div class="flex-grow-1 my-0 rounded overflow-auto mt-2 bg-white">
        <Table class="rounded" Striped Hoverable ResponsiveMode="TableResponsiveMode.Mobile">
            <TableHeader>

                <TableRow>
                    <TableHeaderCell class="w-auto">Product Name</TableHeaderCell>
                    <TableHeaderCell class="w-percent-10">Quantity</TableHeaderCell>
                    <TableHeaderCell class="w-percent-10">Price</TableHeaderCell>
                    <TableHeaderCell class="w-25">Actions</TableHeaderCell>
                </TableRow>
            </TableHeader>
            <TableBody>
                @foreach (ProductModel item in products)
                {
                    <TableRow VerticalAlignment="VerticalAlignment.Middle">
                        <TableRowCell>@item.Productname</TableRowCell>
                        <TableRowCell>@item.Quantity</TableRowCell>
                        <TableRowCell>@item.price</TableRowCell>
                        <TableRowCell>
                            <Button class="btn btn-info">Edit</Button>
                            <Button class="btn btn-danger">Delete</Button>
                        </TableRowCell>
                    </TableRow>
                }

            </TableBody>
        </Table>
    </div>

   @*  <Modal @ref="modalref">
        <ModalContent Centered>
            <ModalHeader>
                <ModalTitle class="text-dark fw-bold">Add Item</ModalTitle>
            </ModalHeader>
            <ModalBody class="text-dark">
                <Field>
                    <FieldLabel>Product Name</FieldLabel>
                    <TextEdit Placeholder="Enter name..." @bind-Text="@prods.ProductName" />
                </Field>
                <Field>
                    <FieldLabel>Product Price</FieldLabel>
                    <NumericEdit @bind-Value="@prods.ProductPrice" Placeholder="Enter price..." />
                </Field>
            </ModalBody>
            <ModalFooter>
                <Button Color="Color.Secondary" Clicked="@HideModal">Close</Button>
                <Button Color="Color.Success" Clicked="@AddNewItem">Add Item</Button>
            </ModalFooter>
        </ModalContent>
    </Modal> *@

    </ChildContent>
        <IndicatorTemplate>
            <Div Position="Position.Fixed.Start.Is50.Top.Is50">
                <SpinKit Type="SpinKitType.Grid" Size="100px" Centered/>
            </Div>
        </IndicatorTemplate>
    </LoadingIndicator>
</div>
        
   

<style>
    .w-percent-10{
        width:10%;
    }

    .w-percent-20 {
        width: 20%;
    }

    .w-percent-40 {
        width: 40%;
    }

    .vertical-align-center{
        display:flex;
        align-items:center;

    }
</style>



@code {
    List<ProductModel> products = new List<ProductModel>();
    private Modal? modalref;
    ProductInsert prods = new ProductInsert();

    Boolean isLoading = true;



    protected override async Task OnInitializedAsync()
    {
        isLoading = true;
        await Getdata();
        isLoading = false;

    }



    private async Task Getdata()
    {
        products = await productservices.GetProducts();

    }



    // private Task ShowAddModal()
    // {
    //     return modalref.Show();
    // }

    // private Task HideModal()
    // {
    //     return modalref.Hide();
    // }

    // private async void AddNewItem()
    // {

    //     bool IsAdded = false;
    //     IsAdded = await productservices.AddProdctItem(prods);
    //     if (IsAdded)
    //     {
    //         await Getdata();

    //     }

    // }



}
