

@page "/Iteminventory"
@inject iProduct productservices

<div class="container-fluid d-flex flex-column h-100 py-2">
        <Field class="d-flex flex-row justify-content-between px-1 my-0 pt-2">
            <Button class="d-block btn btn-success w-auto px-4 " Clicked="@ShowAddModal">Add</Button>
            @* <Button class="d-block btn btn-success w-auto px-4 " Clicked="@RefreshDataGrid">Refresh</Button> *@
            <TextEdit Placeholder="Search.." class="w-50" />
        </Field>

        <div class="mt-2 w-100 bg-light">
        @if (isLoading)
        {
            <SkeletonTable Rows="@isLoadingrow" Columns="@isLoadingcolumn" class="w-100 overflow-auto"
                            Animation="SkeletonAnimation.Wave"/>
        }
        else
        {
            <Table class="w-100 h-100 table table-responsive" >
                <TableHeader>
                    <TableRow>
                        <TableHeaderCell class="w-50">Product Name</TableHeaderCell>
                        <TableHeaderCell class="w-20">Product Price</TableHeaderCell>
                        <TableHeaderCell class="w-auto">Actions</TableHeaderCell>
                    </TableRow>
                </TableHeader>

                <TableBody>
                    @foreach (ProductModel item in products)
                    {
                        <TableRow class="py-0">
                            <TableRowCell>@item.Productname</TableRowCell>
                            <TableRowCell>P @item.price</TableRowCell>
                            <TableRowCell>
                                <Button Color="Color.Primary" Size="Size.Small">Edit</Button>
                                <Button Color="Color.Danger" Size="Size.Small" @onclick="() => DeleteProduct(item.Id)">Delete</Button>
                            </TableRowCell>
                        </TableRow>
                    }
                </TableBody>
            </Table>
        }
    </div>

    

    @* Adding Items Modal *@
    <Modal @ref="modalref">
        <ModalContent Centered>
            <ModalHeader>
                <ModalTitle class="text-dark fw-bold">Add Item</ModalTitle>
            </ModalHeader>
            <ModalBody class="text-dark">
                <Field>
                    <FieldLabel>Product Name</FieldLabel>
                    <TextEdit Placeholder="Enter name..." @bind-Text="@prods.ProductName" />
                </Field>
                <Field>
                    <FieldLabel>Product Price</FieldLabel>
                    <NumericEdit @bind-Value="@prods.ProductPrice" Placeholder="Enter price..." />
                </Field>
            </ModalBody>
            <ModalFooter>
                <Button Color="Color.Secondary" Clicked="@HideModal">Close</Button>
                <Button Color="Color.Success" Clicked="@AddNewItem">Add Item</Button>
            </ModalFooter>
        </ModalContent>
    </Modal>

    
    @* Confirmation Modal *@
    <Modal Closing="@ClosingOKModal" @ref="OKModalref" Centered>
        <ModalContent Centered class="text-dark">
            <ModalHeader class="fw-bold">@AddingStatus</ModalHeader>
            <ModalBody>
                <h4>@AddingStatusTest</h4>
            </ModalBody>
            <ModalFooter>
                <Button Clicked="@closeOKModal" class="btn btn-success">OK</Button>
            </ModalFooter>
        </ModalContent>
    </Modal>


</div>

<style>
    .w-20{
        width:20%;
    }
    
</style>




@code {
    List<ProductModel> products;
    private Modal? modalref; //adding item modal
    ProductInsert prods = new ProductInsert();
    bool visible = false;
    private bool isLoading = true;


    string AddingStatus = "";
    string AddingStatusTest = "";
    Modal OKModalref; //OK Modal
    bool cancelclosed;

    int isLoadingrow = 20;
    int isLoadingcolumn = 3;




    public Task ClosingOKModal(ModalClosingEventArgs e)
    {
        e.Cancel = cancelclosed
            || e.CloseReason != CloseReason.UserClosing;
        return Task.CompletedTask;

    }

    public Task closeOKModal()
    {
        cancelclosed = false;
        modalref.Hide();
        return OKModalref.Hide();

    }


    protected override async Task OnInitializedAsync()
    {
        // isLoading = true;
        await Getdata();

    }

    private async Task Getdata()
    {
        products = await productservices.GetProducts();
        isLoading = false;

    }

    private Task ShowAddModal()
    {
        return modalref.Show();
    }

    private Task HideModal()
    {
        return modalref.Hide();
    }

    private async void AddNewItem()
    {

        bool IsAdded = false;

        IsAdded = await productservices.AddProdctItem(prods);
        prods.ProductName = string.Empty;
        prods.ProductPrice = 0;

        if (IsAdded)
        {
            AddingStatus = "Added Successfully";
            AddingStatusTest = "Infomrmation Added Succesfully";

            await Getdata();
            await OKModalref.Show();

        }
        else
        {
            AddingStatus = "Added Unsuccessfully";
            AddingStatusTest = "An Error Occured";
            await OKModalref.Show();

        }

    }

    private async void DeleteProduct(Guid ProductId)
    {
        
        bool IsDeleted = false;

        IsDeleted = await productservices.DeleteProductItem(ProductId);

        if (IsDeleted)
        {
            AddingStatus = "Deleted Successfully";
            AddingStatusTest = "Product Deleted Successfully";

            await OKModalref.Show();
            await Getdata();

        }
        else
        {
            AddingStatus = "Deleted Unsuccessfully";
            AddingStatusTest = "An Error Occured";
            await OKModalref.Show();

        }
        


    }



}
